import React from 'react';
import PropTypes from 'prop-types';
import Environment from '../environment/environment.js';

export const SessionMixin = {

  //@@viewOn:statics
  statics: {
    "UU5.Common.SessionMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      errors: {
        sessionNotFound: 'Session has to be set.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    session: PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      session: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.SessionMixin");
    return null;
  },

  componentDidMount() {
    let session = this.props.session || Environment.getSession();
    if (session) {
      if (!session.initComplete) {
        session.initPromise.then(() => {
          if (this._unmount) return;
          window.UU5.Environment.EventListener.addSessionExpiringListener(session, this.getId(), this._onSessionExpiring);
          window.UU5.Environment.EventListener.addSessionExtendedListener(session, this.getId(), this._onSessionExtended);
        });
      } else {
        window.UU5.Environment.EventListener.addSessionExpiringListener(session, this.getId(), this._onSessionExpiring);
        window.UU5.Environment.EventListener.addSessionExtendedListener(session, this.getId(), this._onSessionExtended);
      }
    }
  },

  componentWillUnmount() {
    this._unmount = true;
    let session = this.getSession();
    if (session) {
      window.UU5.Environment.EventListener.removeSessionExpiringListener(session, this.getId());
      window.UU5.Environment.EventListener.removeSessionExtendedListener(session, this.getId());
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonSessionMixin() {
    return this.hasMixin("UU5.Common.SessionMixin");
  },

  getUU5CommonSessionMixinProps() {
    return {
      session: this.props.session
    };
  },

  getUU5CommonSessionMixinPropsToPass() {
    return this.getUU5CommonSessionMixinProps();
  },

  getSession() {
    let session = this.props.session || Environment.getSession();
    !session && this.showError('sessionNotFound', null, { mixinName: "UU5.Common.SessionMixin" });
    return session;
  },

  login() {
    let session = this.getSession();
    session && session.login();
    return this;
  },

  logout() {
    let session = this.getSession();
    session && session.logout().catch(e => {
      // TODO
    });
    return this;
  },

  isSessionExpiring() {
    let session = this.getSession();
    return session && session.isAuthenticated() && this._sessionExpiring;
  },

  sessionExpiring(event) {
    this._sessionExpiring = true;
  },

  sessionExtended(event) {
    this._sessionExpiring = false;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onSessionExpiring(event) {
    if (typeof this.onSessionExpiring_ === 'function') {
      this.onSessionExpiring_(event);
    } else {
      this.sessionExpiring(event);
    }
  },

  _onSessionExtended(event) {
    if (typeof this.onSessionExtended_ === 'function') {
      this.onSessionExtended_(event);
    } else {
      this.sessionExtended(event);
    }
  }
  //@@viewOff:componentSpecificHelpers
};

export default SessionMixin;