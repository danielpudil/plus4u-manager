'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Url = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Url = exports.Url = function () {
  _createClass(Url, null, [{
    key: 'parse',
    value: function parse(url) {
      var uu5Url = UU5.Common.Url.parse(url);
      var plus4u5Url = new Url(uu5Url);

      if (url && (typeof url === 'undefined' ? 'undefined' : _typeof(url)) === 'object') {
        url.product && (plus4u5Url.product = url.product);
        url.vendor && (plus4u5Url.vendor = url.vendor);
        url.app && (plus4u5Url.app = url.app);
        url.subApp && (plus4u5Url.subApp = url.subApp);
        url.workspace && (plus4u5Url.workspace = url.workspace);
        url.tid && (plus4u5Url.tid = url.tid);
        url.awid && (plus4u5Url.awid = url.awid);
        url.useCase && (plus4u5Url.useCase = url.useCase);
      }

      return plus4u5Url;
    }
  }]);

  function Url(uu5Url) {
    _classCallCheck(this, Url);

    this._uu5Url = uu5Url || new UU5.Common.Url();
  }

  _createClass(Url, [{
    key: 'set',
    value: function set(params) {
      params.protocol !== undefined && (this.protocol = params.protocol);
      params.hostName !== undefined && (this.hostName = params.hostName);
      params.port !== undefined && (this.port = params.port);
      params.parameters !== undefined && (this.parameters = params.parameters);
      params.hash !== undefined && (this.hash = params.hash);

      params.product !== undefined && (this.product = params.product);
      params.vendor !== undefined && (this.vendor = params.vendor);
      params.app !== undefined && (this.app = params.app);
      params.subApp !== undefined && (this.subApp = params.subApp);
      params.workspace !== undefined && (this.workspace = params.workspace);
      params.tid !== undefined && (this.tid = params.tid);
      params.awid !== undefined && (this.awid = params.awid);
      params.useCase !== undefined && (this.useCase = params.useCase);

      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this._uu5Url.toString();
    }
  }, {
    key: '_getPathNameParser',
    value: function _getPathNameParser() {
      var parser = this._uu5Url.pathName.match(/^(([a-zA-Z0-9_]{1,32})-([a-zA-Z0-9_]{1,32})-?([a-zA-Z0-9_]{1,32})?)\/(([a-zA-Z0-9_]{1,32})-([a-zA-Z0-9_]{1,32}))(?:\/([\w\.\-~\/]*))?$/);
      var result = {};

      if (parser) {
        result = {
          product: parser[1],
          vendor: parser[2],
          app: parser[3],
          subApp: parser[4],
          workspace: parser[5],
          tid: parser[6],
          awid: parser[7],
          useCase: parser[8]
        };
      }

      return result;
    }
  }, {
    key: '_setPathName',
    value: function _setPathName(opt) {
      var parser = this._getPathNameParser();
      var result = '';

      result += opt.product || [opt.vendor || parser.vendor, opt.app || parser.app, opt.subApp || parser.subApp].join('-');
      result += '/' + (opt.workspace || [opt.tid || parser.tid, opt.awid || parser.awid].join('-'));
      result += '/' + (opt.useCase || parser.useCase);

      this._uu5Url.pathName = result;

      return this;
    }
  }, {
    key: 'protocol',
    get: function get() {
      return this._uu5Url.protocol;
    },
    set: function set(protocol) {
      this._uu5Url.protocol = protocol;
      return this;
    }
  }, {
    key: 'hostName',
    get: function get() {
      return this._uu5Url.hostName;
    },
    set: function set(hostName) {
      this._uu5Url.hostName = hostName;
      return this;
    }
  }, {
    key: 'port',
    get: function get() {
      return this._uu5Url.port;
    },
    set: function set(port) {
      this._uu5Url.port = port;
      return this;
    }
  }, {
    key: 'parameters',
    get: function get() {
      return this._uu5Url._parameters;
    },
    set: function set(parameters) {
      this._uu5Url.parameters = parameters;
      return this;
    }
  }, {
    key: 'hash',
    get: function get() {
      return this._uu5Url.hash;
    },
    set: function set(hash) {
      this._uu5Url.hash = hash;
      return this;
    }
  }, {
    key: 'host',
    get: function get() {
      return this._uu5Url.host;
    }
  }, {
    key: 'origin',
    get: function get() {
      return this._uu5Url.origin;
    }
  }, {
    key: 'product',
    get: function get() {
      return this._getPathNameParser().product;
    },
    set: function set(product) {
      this._setPathName({ product: product });
      return this;
    }
  }, {
    key: 'vendor',
    get: function get() {
      return this._getPathNameParser().vendor;
    },
    set: function set(vendor) {
      this._setPathName({ vendor: vendor });
      return this;
    }
  }, {
    key: 'app',
    get: function get() {
      return this._getPathNameParser().app;
    },
    set: function set(app) {
      this._setPathName({ app: app });
      return this;
    }
  }, {
    key: 'subApp',
    get: function get() {
      return this._getPathNameParser().subApp;
    },
    set: function set(subApp) {
      this._setPathName({ subApp: subApp });
      return this;
    }
  }, {
    key: 'workspace',
    get: function get() {
      return this._getPathNameParser().workspace;
    },
    set: function set(workspace) {
      this._setPathName({ workspace: workspace });
      return this;
    }
  }, {
    key: 'tid',
    get: function get() {
      return this._getPathNameParser().tid;
    },
    set: function set(tid) {
      this._setPathName({ tid: tid });
      return this;
    }
  }, {
    key: 'awid',
    get: function get() {
      return this._getPathNameParser().awid;
    },
    set: function set(awid) {
      this._setPathName({ awid: awid });
      return this;
    }
  }, {
    key: 'useCase',
    get: function get() {
      return this._getPathNameParser().useCase;
    },
    set: function set(useCase) {
      this._setPathName({ useCase: useCase });
      return this;
    }
  }]);

  return Url;
}();

;

exports.default = Url;