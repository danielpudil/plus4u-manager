"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calls = undefined;

var _uu_appg = require("uu_appg01");

var _uu_oidcg = require("uu_oidcg01");

var caches = {
  personalRoleUris: {},
  peopleCardUris: {},
  peopleCardAttributes: {}
};

var Calls = exports.Calls = {
  personalRoleUris: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).
  peopleCardUris: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).
  peopleCardAttributes: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).
  accessRoleUris: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).

  call: function call(method, url, params, dtoIn, clientOptions) {
    _uu_appg.Client[method](url, params || dtoIn.data, clientOptions).then(function (response) {
      if (typeof dtoIn.done === 'function') {
        response = response || {};
        response.data = response.data || {};
        dtoIn.done(response.data);
      }
    }, function (response) {
      if (typeof dtoIn.fail === 'function') {
        response = response || {};
        response.data = response.data || {};
        dtoIn.fail(response);
      }
    });
  },
  getPersonalRoleUri: function getPersonalRoleUri(done, fail, uuIdentity) {
    if (!uuIdentity) {
      var identity = _uu_oidcg.Session.currentSession.getIdentity();
      uuIdentity = identity ? identity.uuIdentity : null;
    }

    if (uuIdentity) {
      var cacheData = caches.personalRoleUris[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);else if (cacheData.callbacks) cacheData.callbacks.push({ done: done, fail: fail });else {
        caches.personalRoleUris[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done: done, fail: fail }];

        var commandUri = "https://api.plus4u.net/ues/wcp/ues/core/security/session/UESSession/getPersonalRole";
        Calls.call('get', commandUri, null, {
          done: function done(uri) {
            cacheData.result = uri;
            Calls.personalRoleUris[uuIdentity] = cacheData.result; // TODO 2.0 Remove. Only preserved for backward compatibility (caches were exported).
            var callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(function (it) {
              return typeof it.done === "function" ? it.done(cacheData.result) : null;
            });
          },
          fail: function fail(e) {
            cacheData.error = e;
            var callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(function (it) {
              return typeof it.fail === "function" ? it.fail(cacheData.error) : null;
            });
          }
        });
      }
    }
  },
  getPeopleCardUri: function getPeopleCardUri(uuIdentity, done, fail) {
    if (!uuIdentity) {
      var identity = _uu_oidcg.Session.currentSession.getIdentity();
      uuIdentity = identity ? identity.uuIdentity : null;
    }

    if (uuIdentity) {
      var cacheData = caches.peopleCardUris[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);else if (cacheData.callbacks) cacheData.callbacks.push({ done: done, fail: fail });else {
        caches.peopleCardUris[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done: done, fail: fail }];

        var commandUri = "https://cmd.plus4u.net/PLUS4U-BT/uu-plus4uppl/PersonalCard/getCardList/exec";
        Calls.call('get', commandUri, { p4u_id: uuIdentity }, {
          done: function done(uris) {
            cacheData.result = uris[0].uri;
            Calls.peopleCardUris[uuIdentity] = cacheData.result; // TODO 2.0 Remove. Only preserved for backward compatibility (caches were exported).
            var callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(function (it) {
              return typeof it.done === "function" ? it.done(cacheData.result) : null;
            });
          },
          fail: function fail(e) {
            cacheData.error = e;
            var callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(function (it) {
              return typeof it.fail === "function" ? it.fail(cacheData.error) : null;
            });
          }
        });
      }
    }
  },
  getPeopleCardAttributes: function getPeopleCardAttributes(uuIdentity, done, fail) {
    if (uuIdentity) {
      var cacheData = caches.peopleCardAttributes[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);else if (cacheData.callbacks) cacheData.callbacks.push({ done: done, fail: fail });else {
        caches.peopleCardAttributes[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done: done, fail: fail }];

        Calls.getPeopleCardUri(uuIdentity, function (uri) {
          var commandUri = "https://cmd.plus4u.net/uu-plus4uppl/PersonalCard/getAttributes/exec";
          Calls.call('get', commandUri, { uuUri: uri }, {
            done: function done(attrs) {
              cacheData.result = attrs;
              Calls.peopleCardAttributes[uuIdentity] = cacheData.result; // TODO 2.0 Remove. Only preserved for backward compatibility (caches were exported).
              var callbacks = cacheData.callbacks;
              delete cacheData.callbacks;
              callbacks.forEach(function (it) {
                return typeof it.done === "function" ? it.done(cacheData.result) : null;
              });
            },
            fail: function fail(e) {
              cacheData.error = e;
              var callbacks = cacheData.callbacks;
              delete cacheData.callbacks;
              callbacks.forEach(function (it) {
                return typeof it.fail === "function" ? it.fail(cacheData.error) : null;
              });
            }
          });
        }, function (e) {
          cacheData.error = e;
          var callbacks = cacheData.callbacks;
          delete cacheData.callbacks;
          callbacks.forEach(function (it) {
            return typeof it.fail === "function" ? it.fail(cacheData.error) : null;
          });
        });
      }
    }
  },


  getPropertyValue: function getPropertyValue(uri, done, fail) {
    var commandUri = "https://api.plus4u.net/ues/wcp/ues/core/property/UESProperty/getValue";
    Calls.call('get', commandUri, { uesuri: uri }, { done: done, fail: fail });
  }
};

exports.default = Calls;