"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Navigator = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require("create-react-class");

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require("uu5g04");

var UU5 = _interopRequireWildcard(_uu5g);

require("uu5g04-bricks");

require("uu5g04-forms");

var _uu_plus4u5g = require("uu_plus4u5g01");

var Plus4U5 = _interopRequireWildcard(_uu_plus4u5g);

var _calls = require("./calls.js");

var _calls2 = _interopRequireDefault(_calls);

require("./navigator.less");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Navigator = exports.Navigator = (0, _createReactClass2.default)({
  displayName: "Navigator",


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.PureRenderMixin, UU5.Common.LoadMixin, UU5.Common.LsiMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.App.Navigator',
    classNames: {
      main: 'plus4u5-app-navigator uu5-elevation-5',
      system: 'plus4u5-app-navigator-system',
      divider: 'plus4u5-app-navigator-divider',
      search: 'plus4u5-app-navigator-search',
      personal: 'plus4u5-app-navigator-personal',
      color: 'plus4u5-app-navigator-',
      touchIcon: 'plus4u5-app-navigator-ti',
      small: 'plus4u5-app-navigator-small'
    },
    calls: {
      onLoad: 'loadNavigator',
      onReload: 'loadNavigator'
    },
    defaults: {
      touchIconColor: 'priorityLow',
      moreIcon: 'mdi-apps',
      send: 'mdi-share'
    },
    lsi: {
      more: {
        cs: 'VÃ­ce',
        en: 'More'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    small: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      small: false
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      menuHidden: this.props.small
    };
  },
  componentWillMount: function componentWillMount() {
    this.setCalls(_calls2.default);
  },


  // componentWillReceiveProps() {
  //   Calls[this.getCalls.onLoad];
  // },

  componentWillUnmount: function componentWillUnmount() {
    this._removeEvent();
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_: function getOnLoadData_(props) {
    return {
      uuIdentity: props.uuIdentity
    };
  },
  toggleHidden_: function toggleHidden_(setStateCallback) {
    var _this = this;

    var callback = setStateCallback;
    if (this.state.hidden) {
      callback = function callback() {
        var input = document.getElementById(_this.getId() + '-search-input');
        input && input.focus();
      };
    }

    this.setState(function (state) {
      state.hidden ? _this._addEvent() : _this._removeEvent();
      return { hidden: !state.hidden, menuHidden: state.hidden && _this.props.small };
    }, callback);
    return this;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget: function _findTarget(item) {
    var result = false;
    var id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }

    return result;
  },
  _addEvent: function _addEvent() {
    var _this2 = this;

    this._stopPropagation = true;
    !this.props.disableBackdrop && UU5.Environment.EventListener.addWindowEvent('click', this.getId(), function (e) {
      var isTarget = _this2._findTarget(e.target);

      if (!_this2._stopPropagation && !isTarget && !_this2.isHidden()) {
        _this2.hide();
      } else {
        _this2._stopPropagation = false;
      }
    });
    return this;
  },
  _removeEvent: function _removeEvent() {
    !this.props.disableBackdrop && UU5.Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },
  _getItem: function _getItem(item, localization) {
    var _this3 = this;

    var uriArray = (localization.iconUri || item.iconUri).split('?');
    var urlArray = uriArray[0].split('/');
    var result = void 0;
    var props = {
      code: item.code,
      group: localization.group || item.group,
      icon: urlArray[urlArray.length - 1],
      color: localization.iconUri || item.iconUri ? this._getColor(UU5.Common.Tools.decodeQuery(uriArray[uriArray.length - 1]).color) : this.getClassName('color') + this.getDefault('touchIconColor'),
      text: localization.text || item.text,
      tooltip: localization.tooltip || item.tooltip,
      uri: localization.uri || item.uri
    };

    var tiProps = {
      content: props.text,
      className: this.getClassName('touchIcon') + ' ' + props.color,
      icon: props.icon && 'plus4u-glyphicon-' + props.icon.replace(/_/g, '-').toLocaleLowerCase() || this.getClassName('touchIcon') + '-empty',
      tooltip: props.tooltip
    };

    if (props.code === 'logout' && props.group === 'SYSTEM') {
      tiProps.onClick = function () {
        return _this3.getParent().logout();
      };
    } else {
      tiProps.target = '_blank';
      if (props.uri.match(/^http/)) {
        tiProps.href = props.uri;
      } else {
        tiProps.href = Plus4U5.Common.Tools.getLegacyUrl(props.uri);
      }
    }

    result = _react2.default.createElement(UU5.Bricks.TouchIcon, tiProps);

    return result;
  },
  _getColor: function _getColor(color) {
    return this.getClassName('color') + color;
  },
  _search: function _search() {
    var value = this._input.getValue();

    if (value) {
      value = ('ues:' + value).replace(/^ues:ues:/, 'ues:');
      window.open(Plus4U5.Common.Tools.getLegacyUrl(value), '_blank');
    }

    return this;
  },
  _getItemLocalization: function _getItemLocalization(item, localization) {
    var result = void 0;
    for (var i = 0; i < localization.length; i++) {
      if (item.code === localization[i].code) {
        result = localization[i];
        break;
      }
    }
    return result || [];
  },
  _getContent: function _getContent(dtoOut) {
    var _this4 = this;

    var children = [];
    var systemChildren = [];
    var logoutButton = void 0;
    if (dtoOut.dataHandler) {
      var navItems = Plus4U5.Common.Tools.base64DecodeUnicode(dtoOut.dataHandler);
      var itemLocalization = void 0;
      for (var i = 0; i < navItems.data.itemList.length; i++) {
        itemLocalization = this._getItemLocalization(navItems.data.itemList[i], this.getLsiItem(navItems.data.localization));
        if (this.props.small && this.state.menuHidden) {
          if (navItems.data.itemList[i].code === 'logout') {
            systemChildren.push(_react2.default.createElement(UU5.Bricks.TouchIcon, { onClick: function onClick() {
                _this4._stopPropagation = true;
                _this4.setState({ menuHidden: false });
              }, icon: this.getDefault('moreIcon'), content: this.getLsiItem(this.getLsi('more')), className: this.getClassName('touchIcon') + ' ' + this.getClassName('color') + this.getDefault('touchIconColor') }));

            logoutButton = this._getItem(navItems.data.itemList[i], itemLocalization);
            systemChildren.push(logoutButton);

            break;
          }
        } else {
          if (navItems.data.itemList[i].group && navItems.data.itemList[i].group.toLocaleLowerCase() === 'system') {
            systemChildren.push(this._getItem(navItems.data.itemList[i], itemLocalization));
          } else {
            children.push(this._getItem(navItems.data.itemList[i], itemLocalization));
          }
        }
      }
    }

    var output = void 0;
    if (this.props.small && this.state.menuHidden) {
      output = _react2.default.createElement(UU5.Bricks.Div, { content: systemChildren, className: this.getClassName('system') });
    } else {
      output = [_react2.default.createElement(UU5.Forms.TextIcon, { id: this.getId() + '-search', className: this.getClassName('search'), icon: this.getDefault().send, onClick: this._search, ref_: function ref_(input) {
          return _this4._input = input;
        }, inputAttrs: {
          onKeyDown: function onKeyDown(e) {
            if ((e.keyCode || e.which) === 13) {
              _this4._search();
            }
          }
        } }), _react2.default.createElement(UU5.Bricks.Div, { content: systemChildren, className: this.getClassName('system') }), _react2.default.createElement(UU5.Bricks.Line, { className: this.getClassName('divider'), colorSchema: "grey-rich", size: "s" }), _react2.default.createElement(UU5.Bricks.Div, { content: children, className: this.getClassName('personal') })];
    }
    return output;
  },
  _getMainPropsToPass: function _getMainPropsToPass() {
    var mainProps = this.getMainPropsToPass();
    mainProps.id = this.getId();
    mainProps.parent = null;
    if (this.props.small && this.state.menuHidden) {
      mainProps.className += ' ' + this.getClassName('small');
    }

    return mainProps;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var content = this.getLoadFeedbackChildren(this._getContent);

    return _react2.default.createElement(UU5.Bricks.Div, _extends({}, this._getMainPropsToPass(), { content: content }));
  }
  //@@viewOff:render

});

exports.default = Navigator;