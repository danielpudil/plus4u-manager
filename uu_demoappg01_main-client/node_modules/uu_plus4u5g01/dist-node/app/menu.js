"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Menu = undefined;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require("create-react-class");

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require("uu5g04");

var UU5 = _interopRequireWildcard(_uu5g);

require("uu5g04-bricks");

require("./menu.less");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Menu = exports.Menu = (0, _createReactClass2.default)({
  displayName: "Menu",


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.App.Menu',
    classNames: {
      main: 'plus4u5-app-menu',
      link: 'plus4u5-app-menu-link',
      pageLink: 'plus4u5-app-go-to-page-link',
      icon: 'plus4u5-app-menu-icon',
      linkMain: 'plus4u5-app-menu-link-main',
      linkActive: 'plus4u5-app-menu-link-active'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    activeCode: _propTypes2.default.string,
    items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      content: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
      code: _propTypes2.default.string,
      itemList: _propTypes2.default.array,
      expanded: _propTypes2.default.bool,
      onlyExpandable: _propTypes2.default.bool,
      indent: _propTypes2.default.number
    })),
    onClick: _propTypes2.default.func,
    onCtrlClick: _propTypes2.default.func,
    onWheelClick: _propTypes2.default.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      activeCode: null,
      items: null,
      onClick: null,
      onCtrlClick: null,
      onWheelClick: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      activeCode: this.props.activeCode,
      menuItems: this._formatData(this.props.items, this.props.activeCode)
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        activeCode: nextProps.activeCode,
        menuItems: this._formatData(nextProps.items, nextProps.activeCode, this.state.menuItems)
      });
    }
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  update: function update(pageCode, setStateCallback) {
    var newState = {
      menuItems: this._formatData(this.state.menuItems, pageCode)
    };
    if (pageCode !== undefined && pageCode !== null) {
      newState.activeCode = pageCode;
    }
    this.setState(newState, setStateCallback);
    return this;
  },


  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _forEach: function _forEach(arr, itemToChange) {
    var _this = this;

    return arr.map(function (item) {
      return {
        code: item.code,
        content: item.content,
        expanded: item === itemToChange ? !item.expanded : item.expanded,
        itemList: Array.isArray(item.itemList) ? _this._forEach(item.itemList, itemToChange) : null,
        onlyExpandable: item.code !== undefined && typeof item.onlyExpandable !== "boolean" ? item.onlyExpandable : true
      };
    });
  },
  _toggleExpanded: function _toggleExpanded(itemToChange) {
    this.setState({ menuItems: this._forEach(this.state.menuItems, itemToChange) });
  },
  _formatWithIndent: function _formatWithIndent(array, expandedCodes, activeCode) {
    var indent = 0;
    var indents = { 0: [] };
    var isOk = true;
    for (var index = 0; index < array.length; index++) {
      var item = array[index];

      if (item.indent > indent) {
        indents[item.indent] = [item];
      } else if (item.indent == indent) {
        indents[item.indent].push(item);
      } else {
        for (var i = indent; i > item.indent; i--) {
          if (!indents[i - 1]) {
            console.log("The Menu cannot be rendered because it contains invalid item indentation. Indentation may increase with each item by no more than 1 point.");
            isOk = false;
            break;
          } else {
            indents[i - 1][indents[i - 1].length - 1].itemList = indents[i];
            indents[i] = null;
          }
        }
        indents[item.indent].push(item);
      }
      indent = item.indent;
    };
    if (!isOk) {
      return [];
    }
    for (var i = indent; i > 0; i--) {
      if (!indents[i - 1]) {
        console.log("The Menu cannot be rendered because it contains invalid item indentation. Indentation may increase with each item by no more than 1 point.");
        return [];
      } else {
        indents[i - 1][indents[i - 1].length - 1].itemList = indents[i];
        indents[i] = null;
      }
    }
    return this._formatWithItemList(indents[0], expandedCodes, activeCode);
  },
  _formatWithItemList: function _formatWithItemList(arr, expandedCodes, activeCode, parent) {
    var _this2 = this;

    return arr.map(function (item) {
      var formatData = item.itemList ? _this2._formatWithItemList(item.itemList, expandedCodes, activeCode, item) : null;
      var isActive = activeCode && item.code === activeCode;

      if (parent && (item.expanded || isActive || expandedCodes.indexOf(parent.code) !== -1)) {
        parent.expanded = true;
      }

      return {
        content: item.content,
        code: item.code,
        itemList: formatData,
        expanded: item.expanded,
        onlyExpandable: item.code !== undefined && typeof item.onlyExpandable !== "boolean" ? item.onlyExpandable : true
      };
    });
  },
  _getExpandedItems: function _getExpandedItems(array, expandedItems) {
    var _this3 = this;

    expandedItems = expandedItems || [];
    array.forEach(function (item) {
      if (Array.isArray(item.itemList)) {
        _this3._getExpandedItems(item.itemList, expandedItems);
      }
      if (item.expanded) {
        expandedItems.push(item.code);
      }
    });
    return expandedItems;
  },
  _formatData: function _formatData(arr, activeCode, old_arr) {
    var expandedCodes = old_arr ? this._getExpandedItems(old_arr) : [];
    if (arr[0] && typeof arr[0].indent === "number") {
      return this._formatWithIndent(arr, expandedCodes, activeCode);
    } else {
      return this._formatWithItemList(arr, expandedCodes, activeCode);
    }
  },
  _onClick: function _onClick(item) {
    var _this4 = this;

    if (item.code !== undefined) {
      this.setState({ activeCode: item.code }, function () {
        _this4.props.onClick && _this4.props.onClick(item);
      });
    }
  },
  _onCtrlClick: function _onCtrlClick(item) {
    var _this5 = this;

    if (item.code !== undefined) {
      this.setState({ activeCode: item.code }, function () {
        _this5.props.onCtrlClick && _this5.props.onCtrlClick(item);
      });
    }
  },
  _onWheelClick: function _onWheelClick(item) {
    var _this6 = this;

    if (item.code !== undefined) {
      this.setState({ activeCode: item.code }, function () {
        _this6.props.onWheelClick && _this6.props.onWheelClick(item);
      });
    }
  },
  _getMenuItems: function _getMenuItems(menuItems, level) {
    var _this7 = this;

    var result = [];
    level = level + 1 || 1;

    menuItems && menuItems.forEach(function (item, i) {
      var className = _this7.getClassName().link;
      if (item.code === _this7.state.activeCode) {
        className += ' ' + _this7.getClassName().linkActive;
      }
      if (level === 1) {
        className += ' ' + _this7.getClassName().linkMain;
      }
      var width = 32 + 24 * level;

      if (item.itemList && item.itemList.length > 0) {
        result.push(_react2.default.createElement(
          "div",
          { key: i },
          _react2.default.createElement(
            "div",
            { className: className },
            _react2.default.createElement(
              UU5.Bricks.Link,
              { style: { minWidth: width + 'px' }, className: _this7.getClassName().icon, onClick: function onClick() {
                  return _this7._toggleExpanded(item);
                } },
              _react2.default.createElement(UU5.Bricks.Icon, { icon: item.expanded ? 'mdi-menu-down' : 'mdi-menu-right' })
            ),
            _react2.default.createElement(UU5.Bricks.Link, { className: _this7.getClassName('pageLink'), content: item.content, onClick: function onClick() {
                return item.onlyExpandable ? _this7._toggleExpanded(item) : _this7._onClick(item);
              }, onCtrlClick: function onCtrlClick() {
                return item.onlyExpandable ? _this7._toggleExpanded(item) : _this7._onCtrlClick(item);
              }, onWheelClick: function onWheelClick() {
                return item.onlyExpandable ? _this7._toggleExpanded(item) : _this7._onWheelClick(item);
              } })
          ),
          _react2.default.createElement(
            "div",
            { style: { display: item.expanded ? 'block' : 'none' } },
            _this7._getMenuItems(item.itemList, level)
          )
        ));
      } else {
        result.push(_react2.default.createElement(
          "div",
          { key: i, className: className },
          _react2.default.createElement(UU5.Bricks.Link, { style: { paddingLeft: width + 'px' }, className: _this7.getClassName('pageLink'), content: item.content, onClick: function onClick() {
              return _this7._onClick(item);
            }, onCtrlClick: function onCtrlClick() {
              return _this7._onCtrlClick(item);
            }, onWheelClick: function onWheelClick() {
              return _this7._onWheelClick(item);
            } })
        ));
      }
    });

    return result;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return _react2.default.createElement(
      "div",
      this.getMainAttrs(),
      this._getMenuItems(this.state.menuItems.slice())
    );
  }
  //@@viewOff:render

});

exports.default = Menu;