"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require("create-react-class");

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require("uu5g04");

var _uu5g2 = _interopRequireDefault(_uu5g);

require("uu5g04-bricks");

require("./rich-image.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RichImage = (0, _createReactClass2.default)({
  displayName: "RichImage",

  mixins: [_uu5g2.default.Common.BaseMixin, _uu5g2.default.Common.ElementaryMixin, _uu5g2.default.Common.PureRenderMixin],
  statics: {
    tagName: "Plus4U5.Bricks.RichImage",

    shapes: {
      default: {
        className: "plus4u5-rich-image-default"
      },
      rounded: {
        className: "plus4u5-rich-image-default " + "plus4u5-rich-image-shape-rounded"
      },
      square: {
        className: "plus4u5-rich-image-crop"
      },
      roundedSquare: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-shape-rounded"
      },
      circle: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-shape-circle"
      },
      rect: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43",
        x: 4,
        y: 3
      },
      rect4x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43",
        x: 4,
        y: 3
      },
      rect3x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect32",
        x: 3,
        y: 2
      },
      rect5x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect54",
        x: 5,
        y: 4
      },
      rect2x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect21",
        x: 2,
        y: 1
      },
      rect3x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect31",
        x: 3,
        y: 1
      },
      rect4x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect41",
        x: 4,
        y: 1
      },
      rect45x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect4510",
        x: 45,
        y: 10
      },
      rect16x9: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect169",
        x: 16,
        y: 9
      },
      rect16x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect1610",
        x: 16,
        y: 10
      },
      rect3x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect34",
        x: 3,
        y: 4
      },
      rect4x5: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect45",
        x: 4,
        y: 5
      },
      rect2x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect23",
        x: 2,
        y: 3
      },
      rect1x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect12",
        x: 1,
        y: 2
      }, //rounded starts here
      roundedRect: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 3
      },
      roundedRect4x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 3
      },
      roundedRect3x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect32 " + "plus4u5-rich-image-shape-rounded",
        x: 3,
        y: 2
      },
      roundedRect5x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect54 " + "plus4u5-rich-image-shape-rounded",
        x: 5,
        y: 4
      },
      roundedRect2x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect21 " + "plus4u5-rich-image-shape-rounded",
        x: 2,
        y: 1
      },
      roundedRect3x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect31 " + "plus4u5-rich-image-shape-rounded",
        x: 3,
        y: 1
      },
      roundedRect4x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect41 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 1
      },
      roundedRect45x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect4510 " + "plus4u5-rich-image-shape-rounded",
        x: 45,
        y: 10
      },
      roundedRect16x9: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect169 " + "plus4u5-rich-image-shape-rounded",
        x: 16,
        y: 9
      },
      roundedRect16x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect1610 " + "plus4u5-rich-image-shape-rounded",
        x: 16,
        y: 10
      },
      roundedRect3x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect34 " + "plus4u5-rich-image-shape-rounded",
        x: 3,
        y: 4
      },
      roundedRect4x5: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect45 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 5
      },
      roundedRect2x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect23 " + "plus4u5-rich-image-shape-rounded",
        x: 2,
        y: 3
      },
      roundedRect1x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect12 " + "plus4u5-rich-image-shape-rounded",
        x: 1,
        y: 2
      }

    },
    effects: {
      default: {
        className: "plus4u5-rich-image-effect-default"
      },
      zoom: {
        className: "plus4u5-rich-image-effect-zoom"
      },
      grayscale: {
        className: "plus4u5-rich-image-effect-grayscale"
      },
      blur: {
        className: "plus4u5-rich-image-effect-blur"
      },
      sepia: {
        className: "plus4u5-rich-image-effect-sepia"
      },
      invert: {
        className: "plus4u5-rich-image-effect-invert"
      },
      tilt: {
        className: "plus4u5-rich-image-effect-tilt"
      },
      morph: {
        className: "plus4u5-rich-image-effect-morph"
      }
    },
    classNames: {
      effectCaption: "plus4u5-rich-image-effect-caption",
      img: "plus4u5-rich-image-img",
      landscape: "plus4u5-rich-image-img-landscape",
      portrait: "plus4u5-rich-image-img-portrait",
      shadow: "plus4u5-rich-image-shadow"
    }
  },
  propTypes: {
    src: _propTypes2.default.any,
    thumb: _propTypes2.default.any,
    caption: _propTypes2.default.any,
    effect: _propTypes2.default.any, //zoom, popout, grayscale, blur, none
    shape: _propTypes2.default.any, //square, circle, default
    orientation: _propTypes2.default.any,
    crop: _propTypes2.default.any, //left, top, bottom, right,
    width: _propTypes2.default.any,
    height: _propTypes2.default.any,
    shadow: _propTypes2.default.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      effect: "zoom",
      shape: "default",
      orientation: "landscape",
      shadow: false
    };
  },
  componentWillMount: function componentWillMount() {
    var newState = {};
    var shape = this.props.shape || "default";
    if (shape.substr(0, 4) === 'rect' || shape.substr(0, 11) === 'roundedRect') shape = 'rect';
    switch (shape) {
      case 'square':
      case 'roundedSquare':
      case 'circle':
        newState.orientation = 'landscape';
        break;
      case 'rect':
        var s = this._getShape(this.props.shape);
        newState.orientation = s.x > s.y ? 'landscape' : 'portrait';
        break;
      default:
        newState.orientation = 'default';
    }
    this.setState(newState);
  },
  _getShape: function _getShape(shape) {
    return this.constructor.shapes[shape] ? this.constructor.shapes[shape] : this.constructor.shapes['default'];
  },
  _getEffect: function _getEffect(effect) {
    return this.constructor.effects[effect] ? this.constructor.effects[effect] : this.constructor.effects['default'];
  },
  _getFrameDiv: function _getFrameDiv(shape, effect, children) {
    var r = void 0;
    var mainAttrs = this.getMainAttrs();
    if (this.props.width || this.props.height) {
      mainAttrs.style = mainAttrs.style || {};
      if (this.props.width) mainAttrs.style.width = this.props.width;
      if (this.props.height) mainAttrs.style.height = this.props.height;
    }
    var shadowDiv = this.props.shadow ? _react2.default.createElement("div", { className: this.getClassName('shadow') }) : null;

    switch (effect) {
      case 'blur':
        r = _react2.default.createElement(
          _uu5g2.default.Bricks.Div,
          { mainAttrs: mainAttrs, className: this._getShape(this.props.shape).className + ' ' + this._getEffect(this.props.effect).className },
          shadowDiv,
          children,
          _react2.default.createElement(
            "div",
            { className: this.getClassName().effectCaption },
            this.getLsiValue(this.props.caption)
          )
        );
        break;
      default:
        r = _react2.default.createElement(
          _uu5g2.default.Bricks.Div,
          { mainAttrs: mainAttrs, className: this._getShape(this.props.shape).className + ' ' + this._getEffect(this.props.effect).className },
          shadowDiv,
          children
        );
    }
    return r;
  },
  _onLoad: function _onLoad() {
    if (this.state.orientation === 'default') return;

    var s = this._getShape(this.props.shape);
    s.x = s.x || 1;
    s.y = s.y || 1;

    var img = this._img.getBoundingClientRect();
    if (img.height / img.width >= s.y / s.x) {
      this.setState({ orientation: "portrait" });
    } else {
      this.setState({ orientation: "landscape" });
    }
  },
  render: function render() {
    var _this = this;

    var src = this.props.thumb ? this.props.thumb : this.props.src;
    var className = "";
    switch (this.state.orientation) {
      case 'portrait':
        className = this.getClassName().portrait;
        break;
      case 'landscape':
        className = this.getClassName().landscape;
        break;
      default:
        className = this.getClassName().img;
    }

    return this._getFrameDiv(this.props.shape, this.props.effect,
    //<span>text</span>
    _react2.default.createElement("img", { alt: this.getName(), src: src, ref: function ref(img) {
        return _this._img = img;
      }, className: className, onLoad: function onLoad() {
        return _this._onLoad();
      } }))

    //{this.props.lightBox ?
    //  <UU5.Bricks.Link onClick={() => this.props.lightBox.show(this.state.index)}>
    //    <UU5.Bricks.Image src={this.props.thumb} />
    //  </UU5.Bricks.Link> :
    ;
  }
});

exports.default = RichImage;