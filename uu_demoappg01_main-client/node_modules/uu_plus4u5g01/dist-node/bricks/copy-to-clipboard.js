"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CopyToClipboard = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require("create-react-class");

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require("uu5g04");

var UU5 = _interopRequireWildcard(_uu5g);

require("uu5g04-bricks");

var _calls = require("./calls.js");

var _calls2 = _interopRequireDefault(_calls);

require("./copy-to-clipboard.less");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CopyToClipboard = exports.CopyToClipboard = (0, _createReactClass2.default)({
  displayName: "CopyToClipboard",


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin, UU5.Common.CallsMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.Bricks.CopyToClipboard',
    nestingLevel: 'smallBox',
    classNames: {
      main: 'plus4u5-bricks-copy-to-clipboard',
      icon: 'plus4u5-bricks-copy-to-clipboard-icon',
      rotating: 'plus4u5-bricks-copy-to-clipboard-icon-rotating'
    },
    defaults: {
      regexpIsUrl: /^(file|ftp|http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/=]*)/g
    },
    calls: {
      onLoad: 'getData'
    },
    opt: {
      nestingLevelWrapper: true
    },
    errors: {
      loadingFailed: 'Error occurred while loading data from given url.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    src: _propTypes2.default.string,
    onClickAfter: _propTypes2.default.func,
    initialContent: _propTypes2.default.string,
    loadingContent: _propTypes2.default.string,
    readyContent: _propTypes2.default.string,

    // button props
    size: _propTypes2.default.string,
    displayBlock: _propTypes2.default.bool,
    bgStyle: _propTypes2.default.string,
    pressed: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      src: null,
      onClickAfter: null,
      initialContent: null,
      loadingContent: null,
      readyContent: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      state: 'initial',
      dtoOut: null
    };
  },
  componentWillMount: function componentWillMount() {
    this.setCalls(_calls2.default);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _isUrl: function _isUrl() {
    return this.props.src && !!this.props.src.match(this.getDefault('regexpIsUrl'));
  },
  _getBasicButton: function _getBasicButton() {
    var _this = this;

    return _react2.default.createElement(UU5.Bricks.Button, _extends({}, this._getMainProps(), { onClick: function onClick(button, e) {
        UU5.Common.Tools.copyToClipboard(_this.props.src);
        typeof _this.props.onClickAfter === 'function' && _this.props.onClickAfter(e, _this.props.src);
      } }));
  },
  _getMainProps: function _getMainProps() {
    var props = this.getMainPropsToPass();

    props.size = this.props.size;
    props.displayBlock = this.props.displayBlock;
    props.bgStyle = this.props.bgStyle;
    props.pressed = this.props.pressed;

    return props;
  },
  _getUrlButton: function _getUrlButton() {
    var _this2 = this;

    var buttonProps = void 0;
    switch (this.state.state) {
      case 'initial':
        buttonProps = {
          content: [_react2.default.createElement(UU5.Bricks.Icon, { key: "icon", icon: "mdi-download", className: this.getClassName('icon') }), this.props.initialContent || this.getChildren()],
          colorSchema: 'primary',
          onClick: function onClick(button, e) {
            _this2.setState({ state: 'loading' }, function () {
              _this2.getCall('onLoad')({
                data: { src: _this2.props.src },
                done: function done(dtoOut) {
                  _this2.setAsyncState({
                    state: 'ready',
                    dtoOut: dtoOut
                  });
                },
                fail: function fail(dtoOut) {
                  // TODO
                  _this2.setAsyncState({
                    state: 'ready',
                    dtoOut: dtoOut,
                    disabled: true
                  });
                  _this2.showError('loadingFailed');
                }
              });
            });
          }
        };
        break;
      case 'loading':
        buttonProps = {
          content: [_react2.default.createElement(UU5.Bricks.Icon, { key: "icon", icon: "mdi-refresh", className: this.getClassName('icon') + ' ' + this.getClassName('rotating') }), this.props.loadingContent || this.getChildren()],
          colorSchema: 'primary'
        };
        break;
      case 'ready':
        buttonProps = {
          content: [_react2.default.createElement(UU5.Bricks.Icon, { key: "icon", icon: "mdi-content-copy", className: this.getClassName('icon') }), this.props.readyContent || this.getChildren()],
          colorSchema: 'success',
          disabled: this.state.disabled,
          onClick: function onClick() {
            UU5.Common.Tools.copyToClipboard(_this2.state.dtoOut);
            typeof _this2.props.onClickAfter === 'function' && _this2.props.onClickAfter();
          }
        };
        break;
    }

    return _react2.default.createElement(UU5.Bricks.Button, _extends({}, this._getMainProps(), buttonProps));
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? this._isUrl() ? this._getUrlButton() : this._getBasicButton() : null;
  }
} //@@viewOff:render

);

exports.default = CopyToClipboard;