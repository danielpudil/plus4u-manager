'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BusinessCard = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _uu_plus4u5g = require('uu_plus4u5g01');

var Plus4U5 = _interopRequireWildcard(_uu_plus4u5g);

var _calls = require('./calls.js');

var _calls2 = _interopRequireDefault(_calls);

require('./business-card.less');

var _userPhoto = require('./user-photo.js');

var _userPhoto2 = _interopRequireDefault(_userPhoto);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BusinessCard = exports.BusinessCard = (0, _createReactClass2.default)({
  displayName: 'BusinessCard',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.PureRenderMixin, UU5.Common.IdentityMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.Bricks.BusinessCard',
    classNames: {
      main: 'plus4u5-bricks-business-card'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uuIdentity: _propTypes2.default.string,
    type: _propTypes2.default.oneOf([1, 2]),
    vertical: _propTypes2.default.bool,
    visual: _propTypes2.default.oneOf(['shortInfo', 'fullInfo', 'mini', 'inline']),
    bgStyle: _propTypes2.default.oneOf(['outlined', 'filled', 'transparent'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      uuIdentity: null,
      type: 1,
      vertical: false,
      visual: 'shortInfo',
      bgStyle: 'outlined'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getUuIdentity: function _getUuIdentity(props) {
    props = props || this.props;
    return props.uuIdentity || (this.getIdentity() ? this.getIdentity().uuIdentity : null);
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.isAuthenticated() ? _react2.default.createElement(BusinessCardBody, _extends({}, this.props, { uuIdentity: this._getUuIdentity() })) : this.isPending() && _react2.default.createElement(UU5.Bricks.Loading, null);
  }
  //@@viewOff:render

});

var BusinessCardBody = (0, _createReactClass2.default)({
  displayName: 'BusinessCardBody',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.PureRenderMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ScreenSizeMixin, UU5.Common.LoadMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.Bricks.BusinessCardBody',
    classNames: {
      main: 'plus4u5-bricks-business-card-body',
      modal: 'plus4u5-bricks-business-card-modal',
      modalHorizontal: 'plus4u5-bricks-business-card-modal-horizontal',
      type: 'plus4u5-bricks-business-card-type-',
      visual: 'plus4u5-bricks-business-card-',
      bgStyle: 'plus4u5-bricks-business-card-bg-',
      vertical: 'plus4u5-bricks-business-card-vertical',
      horizontal: 'plus4u5-bricks-business-card-horizontal',
      leftWrapper: 'plus4u5-bricks-business-card-left-wrapper',
      rightWrapper: 'plus4u5-bricks-business-card-right-wrapper',
      photo: 'plus4u5-bricks-business-card-photo',
      name: 'plus4u5-bricks-business-card-name',
      contacts: 'plus4u5-bricks-business-card-contacts',
      contactsItem: 'plus4u5-bricks-business-card-contacts-item',
      wrapText: 'plus4u5-bricks-business-card-wrap-text',
      contactText: 'plus4u5-bricks-business-card-contact-text',
      moreInfo: 'plus4u5-bricks-business-card-more',
      icon: 'plus4u5-bricks-business-card-icon uu5-common-text'
    },
    defaults: {
      googleMapsSearch: 'https://www.google.cz/maps/place/'
    },
    calls: {
      onLoad: 'loadPeopleCardAttributes'
    },
    lsi: function lsi() {
      return Plus4U5.Environment.Lsi.Bricks.businessCard;
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uuIdentity: _propTypes2.default.string,
    type: _propTypes2.default.any,
    vertical: _propTypes2.default.any,
    visual: _propTypes2.default.any,
    bgStyle: _propTypes2.default.any
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    this.setCalls(_calls2.default);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.uuIdentity !== this.props.uuIdentity) {
      this.reload();
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_: function getOnLoadData_(props) {
    return {
      uuIdentity: props.uuIdentity
    };
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getName: function _getName() {
    var data = this.getDtoOut();
    return data ? data.first_name + ' ' + data.surname : null;
  },
  _getContact: function _getContact(contact, i) {
    var item = {
      props: {
        content: contact.contact,
        className: this.getClassName("contactText")
      }
    };
    switch (contact.type) {
      case 'phone':
        item.icon = 'mdi-phone';
        item.props.href = 'tel:' + contact.contact;
        break;
      case 'email':
        item.icon = 'mdi-email';
        item.props.href = 'mailto:' + contact.contact;
        break;
      case 'link':
        item.icon = 'mdi-web';
        item.props.href = 'http://' + contact.contact;
        item.props.target = "_blank";
        break;
      case 'address':
        item.icon = 'mdi-map-marker';
        item.multiline = true;
        item.props.href = this.getDefault('googleMapsSearch') + contact.contact;
        item.props.target = "_blank";
        break;
      default:
        item.icon = 'mdi-contact-mail';
        item.props.href = null;
    }

    var className = this.getClassName('contactsItem');
    !item.multiline && (className += ' ' + this.getClassName('wrapText'));

    return _react2.default.createElement(
      UU5.Bricks.Span,
      { key: i, className: className },
      _react2.default.createElement(UU5.Bricks.Icon, { className: this.getClassName("icon"), icon: item.icon }),
      this.props.visual !== 'mini' && _react2.default.createElement(UU5.Bricks.Link, item.props)
    );
  },
  _getContacts: function _getContacts() {
    var _this = this;

    var data = this.getDtoOut();
    var contactList = data ? data.contact_list : [];
    var mainContacts = {};
    var mainTypes = ['phone', 'email', 'address'];
    contactList.forEach(function (item) {
      if (mainTypes.indexOf(item.type) !== -1) {
        if (mainContacts[item.type]) {
          if (item.primary) mainContacts[item.type] = item;
        } else {
          mainContacts[item.type] = item;
        }
      }
    });

    var mainContactsList = [];
    mainContacts.phone && mainContactsList.push(mainContacts.phone);
    mainContacts.email && mainContactsList.push(mainContacts.email);
    mainContacts.address && mainContactsList.push(mainContacts.address);

    if (this.props.visual !== 'fullInfo') {
      contactList = mainContactsList;
    } else {
      var _contactList;

      mainContactsList.forEach(function (item) {
        contactList.splice(contactList.indexOf(item), 1);
      });
      (_contactList = contactList).unshift.apply(_contactList, mainContactsList);
    }

    return contactList.map(function (item, i) {
      return _this._getContact(item, i);
    });
  },
  _getMainAttrs: function _getMainAttrs() {
    var _this2 = this;

    var mainAttrs = this.getMainAttrs();
    mainAttrs.elevation = this.props.bgStyle === 'transparent' ? 0 : 2;
    mainAttrs.elevationHover = mainAttrs.elevation;

    mainAttrs.className += ' ' + this.getClassName('type') + this.props.type;
    mainAttrs.className += ' ' + this.getClassName(this.props.vertical ? 'vertical' : 'horizontal');
    mainAttrs.className += ' ' + this.getClassName('visual') + this.props.visual.toLowerCase();
    if (this.props.visual !== 'inline') {
      mainAttrs.className += ' ' + this.getClassName('bgStyle') + this.props.bgStyle;
    }

    if (this.props.visual === 'mini') {
      mainAttrs.mainAttrs = {
        onClick: function onClick() {
          return _this2._modal.open();
        }
      };
    }

    return mainAttrs;
  },
  _getChild: function _getChild() {
    var _this3 = this;

    var leftWrapperClassName = this.getClassName("leftWrapper");
    if (this.props.bgStyle === 'filled' && this.props.visual !== 'inline') {
      leftWrapperClassName += ' uu5-common-bg';
    }

    var rightWrapperClassName = this.getClassName("rightWrapper");
    if (this.props.bgStyle === 'filled' && this.props.visual === 'mini') {
      rightWrapperClassName += ' uu5-common-bg';
    }

    var nameClassName = this.getClassName('name');
    if (this.props.visual !== 'mini' && this.props.visual !== 'inline') {
      nameClassName += ' uu5-common-text';
    }

    var nameInRightWrapper = this.props.visual === 'mini' && !this.props.vertical || this.props.visual === 'inline';

    var modalClassName = this.getClassName('modal');
    !this.props.vertical && (modalClassName += ' ' + this.getClassName('modalHorizontal'));

    return _react2.default.createElement(
      UU5.Bricks.Card,
      this._getMainAttrs(),
      _react2.default.createElement(
        UU5.Bricks.Div,
        { className: leftWrapperClassName, colorSchema: this.props.bgStyle === 'filled' ? this.getColorSchema() : 'custom' },
        _react2.default.createElement(_userPhoto2.default, { uuIdentity: this.props.uuIdentity, className: this.getClassName("photo"), type: 'circle', width: this.props.visual === 'inline' ? 32 : 120, shadow: true }),
        !nameInRightWrapper ? _react2.default.createElement(
          UU5.Bricks.Span,
          { className: nameClassName },
          this._getName()
        ) : null
      ),
      _react2.default.createElement(
        UU5.Bricks.Div,
        { className: rightWrapperClassName },
        nameInRightWrapper ? _react2.default.createElement(
          UU5.Bricks.Span,
          { className: nameClassName },
          this._getName()
        ) : null,
        this.props.visual !== 'inline' ? _react2.default.createElement(
          UU5.Bricks.Div,
          { className: this.getClassName("contacts") },
          this._getContacts()
        ) : null,
        this.props.visual === 'shortInfo' ? _react2.default.createElement(UU5.Bricks.Button, { className: this.getClassName('moreInfo'), bgStyle: 'transparent', content: this.getLsiComponent('moreInfo'), onClick: function onClick() {
            return _this3._modal.open();
          } }) : null
      ),
      this.props.visual === 'mini' || this.props.visual === 'shortInfo' ? _react2.default.createElement(UU5.Bricks.Modal, { className: modalClassName, ref_: function ref_(item) {
          return _this3._modal = item;
        }, scrollableBackground: true, header: ' ', content: _react2.default.createElement(BusinessCardBody, _extends({}, this.props, { vertical: this.isXs() || this.props.vertical, bgStyle: this.props.bgStyle === 'filled' ? 'filled' : 'transparent', visual: 'fullInfo' })) }) : null
    );
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this4 = this;

    return this.getLoadFeedbackChildren(function (dtoOut) {
      return _this4._getChild();
    });
  }
  //@@viewOff:render

});

exports.default = BusinessCard;