import Tools from './tools.js';

export class EventListener {
  constructor() {
    this._screenSize = Tools.getScreenSize();

    this._events = {};

    this._listeners = {
      screenSize: {},
      lsi: {},
      highlight: {},
      dateTime: {},
      number: {},
      loadLibs: {}
    };

    window.onresize = this._onScreenSizeChange.bind(this);
    this.addWindowEvent('orientationchange', Tools.generateUUID(), this._onScreenSizeChange.bind(this));
  }

  registerEvent(key, id, fce) {
    if (typeof fce === 'function') {
      this._listeners[key] = this._listeners[key] || {};
      this._listeners[key][id] = fce;
    } else {
      this._writeError(key, id, fce);
    }
  }

  triggerEvent() {
    // i.e. arguments = ['lsi', 'cs-cz']
    let [key, ...params] = arguments;
    for (let id in this._listeners[key]) {
      this._listeners[key][id].apply(null, params);
    }
  }

  unregisterEvent(key, id) {
    if (this._listeners[key]) {
      delete this._listeners[key][id];
    }
  }

  addEvent(object, key, id, fce) {
    if (typeof fce === 'function') {
      if (!this._events[key]) {
        this._events[key] = this._events[key] || {};
        object.addEventListener(key, e => {
          for (let id in this._events[key]) {
            this._events[key][id](e);
          }
        });
      }

      this._events[key][id] = fce;
    } else {
      this._writeError(key, id, fce);
    }
  }

  removeEvent(object, key, id) {
    if (this._events[key] && this._events[key][id]) {
      object.removeEventListener(key, this._events[key][id]);
      delete this._events[key][id];
    }
  }

  createEvent(object, key, id, fce) {
    if (typeof fce === 'function') {
      if (!this._events[id] || !this._events[id][key]) {
        this._events[id] = this._events[id] || {};
        this._events[id][key] = this._events[id][key] || {};
        object.addEventListener(key, e => this._events[id][key](e));
      }

      this._events[id][key] = fce;
    } else {
      this._writeError(key, id, fce);
    }
  }

  deleteEvent(object, key, id) {
    if (this._events[id] && this._events[id][key]) {
      object.removeEventListener(key, this._events[id][key]);
      delete this._events[id][key];
    }
  }

  addIdentityChangeListener(session, id, fce) {
    this._addSessionEvent(session, 'identityChange', id, fce);
  }

  removeIdentityChangeListener(session, id) {
    this._removeSessionEvent(session, 'identityChange', id);
  }

  addSessionExpiringListener(session, id, fce) {
    this._addSessionEvent(session, 'sessionExpiring', id, fce);
  }

  removeSessionExpiringListener(session, id) {
    this._removeSessionEvent(session, 'sessionExpiring', id);
  }

  addSessionExtendedListener(session, id, fce) {
    this._addSessionEvent(session, 'sessionExtended', id, fce);
  }

  removeSessionExtendedListener(session, id) {
    this._removeSessionEvent(session, 'sessionExtended', id);
  }

  addWindowEvent(key, id, fce) {
    this.addEvent(window, key, id, fce);
  }

  removeWindowEvent(key, id) {
    this.removeEvent(window, key, id);
  }

  registerLsi(id, fce) {
    this.registerEvent('lsi', id, fce);
  }

  triggerLsi(lang) {
    this.triggerEvent('lsi', lang);
  }

  unregisterLsi(id) {
    this.unregisterEvent('lsi', id);
  }

  registerScreenSize(id, fce) {
    this.registerEvent('screenSize', id, fce);
  }

  triggerScreenSize(e, screenSize) {
    this.triggerEvent('screenSize', e, screenSize);
  }

  unregisterScreenSize(id) {
    this.unregisterEvent('screenSize', id);
  }

  registerHighlight(id, fce) {
    this.registerEvent('highlight', id, fce);
  }

  triggerHighlight(searchedTexts) {
    this.triggerEvent('highlight', searchedTexts);
  }

  unregisterHighlight(id) {
    this.unregisterEvent('highlight', id);
  }

  registerDateTime(id, fce) {
    this.registerEvent('dateTime', id, fce);
  }

  triggerDateTime(opt) {
    this.triggerEvent('dateTime', opt);
  }

  unregisterDateTime(id) {
    this.unregisterEvent('dateTime', id);
  }

  registerNumber(id, fce) {
    this.registerEvent('number', id, fce);
  }

  triggerNumber(opt) {
    this.triggerEvent('number', opt);
  }

  unregisterNumber(id) {
    this.unregisterEvent('number', id);
  }

  registerLoadLibs(id, fce) {
    this.registerEvent('loadLibs', id, fce);
  }

  triggerLoadLibs(markers) {
    this.triggerEvent('loadLibs', markers);
  }

  unregisterLoadLibs(id) {
    this.unregisterEvent('loadLibs', id);
  }

  _addSessionEvent(session, key, id, fce) {
    if (typeof fce === 'function') {
      if (!this._events[key]) {
        this._events[key] = this._events[key] || {};
        session.addListener(key, e => {
          for (let id in this._events[key]) {
            this._events[key][id](e);
          }
        });
      }

      this._events[key][id] = fce;
    } else {
      this._writeError(key, id, fce);
    }
  }

  _removeSessionEvent(session, key, id) {
    if (this._events[key] && this._events[key][id]) {
      session.removeListener(key, this._events[key][id]);
      delete this._events[key][id];
    }
  }

  _onScreenSizeChange(e) {
    let actualScreenSize = Tools.getScreenSize();
    if (actualScreenSize !== this._screenSize) {
      this._screenSize = actualScreenSize;
      this.triggerScreenSize(e, actualScreenSize);
    }
  }

  _writeError(key, id, fce) {
    Tools.error(`In event "${key}" parameter is not function.`, {
      component: 'EventListener',
      id: id,
      function: fce,
      key: key
    });
  }
}

export default EventListener;