import { Client } from "uu_appg01";
import { Session } from "uu_oidcg01";

const caches = {
  personalRoleUris: {},
  peopleCardUris: {},
  peopleCardAttributes: {}
};

export const Calls = {
  personalRoleUris: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).
  peopleCardUris: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).
  peopleCardAttributes: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).
  accessRoleUris: {}, // TODO 2.0 Remove. Only preserved for backward compatibility (Calls are exported as API).

  call(method, url, params, dtoIn, clientOptions) {
    Client[method](url, params || dtoIn.data, clientOptions).then(response => {
      if (typeof dtoIn.done === 'function') {
        response = response || {};
        response.data = response.data || {};
        dtoIn.done(response.data);
      }
    }, response => {
      if (typeof dtoIn.fail === 'function') {
        response = response || {};
        response.data = response.data || {};
        dtoIn.fail(response);
      }
    });
  },

  getPersonalRoleUri(done, fail, uuIdentity) {
    if (!uuIdentity) {
      let identity = Session.currentSession.getIdentity();
      uuIdentity = identity ? identity.uuIdentity : null;
    }

    if (uuIdentity) {
      let cacheData = caches.personalRoleUris[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);else if (cacheData.callbacks) cacheData.callbacks.push({ done, fail });else {
        caches.personalRoleUris[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done, fail }];

        let commandUri = "https://api.plus4u.net/ues/wcp/ues/core/security/session/UESSession/getPersonalRole";
        Calls.call('get', commandUri, null, {
          done: uri => {
            cacheData.result = uri;
            Calls.personalRoleUris[uuIdentity] = cacheData.result; // TODO 2.0 Remove. Only preserved for backward compatibility (caches were exported).
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => typeof it.done === "function" ? it.done(cacheData.result) : null);
          },
          fail: e => {
            cacheData.error = e;
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => typeof it.fail === "function" ? it.fail(cacheData.error) : null);
          }
        });
      }
    }
  },

  getPeopleCardUri(uuIdentity, done, fail) {
    if (!uuIdentity) {
      let identity = Session.currentSession.getIdentity();
      uuIdentity = identity ? identity.uuIdentity : null;
    }

    if (uuIdentity) {
      let cacheData = caches.peopleCardUris[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);else if (cacheData.callbacks) cacheData.callbacks.push({ done, fail });else {
        caches.peopleCardUris[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done, fail }];

        let commandUri = "https://cmd.plus4u.net/PLUS4U-BT/uu-plus4uppl/PersonalCard/getCardList/exec";
        Calls.call('get', commandUri, { p4u_id: uuIdentity }, {
          done: uris => {
            cacheData.result = uris[0].uri;
            Calls.peopleCardUris[uuIdentity] = cacheData.result; // TODO 2.0 Remove. Only preserved for backward compatibility (caches were exported).
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => typeof it.done === "function" ? it.done(cacheData.result) : null);
          },
          fail: e => {
            cacheData.error = e;
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => typeof it.fail === "function" ? it.fail(cacheData.error) : null);
          }
        });
      }
    }
  },

  getPeopleCardAttributes(uuIdentity, done, fail) {
    if (uuIdentity) {
      let cacheData = caches.peopleCardAttributes[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);else if (cacheData.callbacks) cacheData.callbacks.push({ done, fail });else {
        caches.peopleCardAttributes[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done, fail }];

        Calls.getPeopleCardUri(uuIdentity, uri => {
          let commandUri = "https://cmd.plus4u.net/uu-plus4uppl/PersonalCard/getAttributes/exec";
          Calls.call('get', commandUri, { uuUri: uri }, {
            done: attrs => {
              cacheData.result = attrs;
              Calls.peopleCardAttributes[uuIdentity] = cacheData.result; // TODO 2.0 Remove. Only preserved for backward compatibility (caches were exported).
              let callbacks = cacheData.callbacks;
              delete cacheData.callbacks;
              callbacks.forEach(it => typeof it.done === "function" ? it.done(cacheData.result) : null);
            },
            fail: e => {
              cacheData.error = e;
              let callbacks = cacheData.callbacks;
              delete cacheData.callbacks;
              callbacks.forEach(it => typeof it.fail === "function" ? it.fail(cacheData.error) : null);
            }
          });
        }, e => {
          cacheData.error = e;
          let callbacks = cacheData.callbacks;
          delete cacheData.callbacks;
          callbacks.forEach(it => typeof it.fail === "function" ? it.fail(cacheData.error) : null);
        });
      }
    }
  },

  getPropertyValue: (uri, done, fail) => {
    let commandUri = "https://api.plus4u.net/ues/wcp/ues/core/property/UESProperty/getValue";
    Calls.call('get', commandUri, { uesuri: uri }, { done, fail });
  }
};

export default Calls;