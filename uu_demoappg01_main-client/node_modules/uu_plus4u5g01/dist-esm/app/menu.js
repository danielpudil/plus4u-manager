import React from "react";
import createReactClass from 'create-react-class';
import PropTypes from "prop-types";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";

import './menu.less';

export const Menu = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.App.Menu',
    classNames: {
      main: 'plus4u5-app-menu',
      link: 'plus4u5-app-menu-link',
      pageLink: 'plus4u5-app-go-to-page-link',
      icon: 'plus4u5-app-menu-icon',
      linkMain: 'plus4u5-app-menu-link-main',
      linkActive: 'plus4u5-app-menu-link-active'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    activeCode: PropTypes.string,
    items: PropTypes.arrayOf(PropTypes.shape({
      content: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
      code: PropTypes.string,
      itemList: PropTypes.array,
      expanded: PropTypes.bool,
      onlyExpandable: PropTypes.bool,
      indent: PropTypes.number
    })),
    onClick: PropTypes.func,
    onCtrlClick: PropTypes.func,
    onWheelClick: PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      activeCode: null,
      items: null,
      onClick: null,
      onCtrlClick: null,
      onWheelClick: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      activeCode: this.props.activeCode,
      menuItems: this._formatData(this.props.items, this.props.activeCode)
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        activeCode: nextProps.activeCode,
        menuItems: this._formatData(nextProps.items, nextProps.activeCode, this.state.menuItems)
      });
    }
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  update(pageCode, setStateCallback) {
    let newState = {
      menuItems: this._formatData(this.state.menuItems, pageCode)
    };
    if (pageCode !== undefined && pageCode !== null) {
      newState.activeCode = pageCode;
    }
    this.setState(newState, setStateCallback);
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _forEach(arr, itemToChange) {
    return arr.map(item => {
      return {
        code: item.code,
        content: item.content,
        expanded: item === itemToChange ? !item.expanded : item.expanded,
        itemList: Array.isArray(item.itemList) ? this._forEach(item.itemList, itemToChange) : null,
        onlyExpandable: item.code !== undefined && typeof item.onlyExpandable !== "boolean" ? item.onlyExpandable : true
      };
    });
  },

  _toggleExpanded(itemToChange) {
    this.setState({ menuItems: this._forEach(this.state.menuItems, itemToChange) });
  },

  _formatWithIndent(array, expandedCodes, activeCode) {
    let indent = 0;
    let indents = { 0: [] };
    let isOk = true;
    for (var index = 0; index < array.length; index++) {
      let item = array[index];

      if (item.indent > indent) {
        indents[item.indent] = [item];
      } else if (item.indent == indent) {
        indents[item.indent].push(item);
      } else {
        for (var i = indent; i > item.indent; i--) {
          if (!indents[i - 1]) {
            console.log("The Menu cannot be rendered because it contains invalid item indentation. Indentation may increase with each item by no more than 1 point.");
            isOk = false;
            break;
          } else {
            indents[i - 1][indents[i - 1].length - 1].itemList = indents[i];
            indents[i] = null;
          }
        }
        indents[item.indent].push(item);
      }
      indent = item.indent;
    };
    if (!isOk) {
      return [];
    }
    for (var i = indent; i > 0; i--) {
      if (!indents[i - 1]) {
        console.log("The Menu cannot be rendered because it contains invalid item indentation. Indentation may increase with each item by no more than 1 point.");
        return [];
      } else {
        indents[i - 1][indents[i - 1].length - 1].itemList = indents[i];
        indents[i] = null;
      }
    }
    return this._formatWithItemList(indents[0], expandedCodes, activeCode);
  },

  _formatWithItemList(arr, expandedCodes, activeCode, parent) {
    return arr.map(item => {
      let formatData = item.itemList ? this._formatWithItemList(item.itemList, expandedCodes, activeCode, item) : null;
      let isActive = activeCode && item.code === activeCode;

      if (parent && (item.expanded || isActive || expandedCodes.indexOf(parent.code) !== -1)) {
        parent.expanded = true;
      }

      return {
        content: item.content,
        code: item.code,
        itemList: formatData,
        expanded: item.expanded,
        onlyExpandable: item.code !== undefined && typeof item.onlyExpandable !== "boolean" ? item.onlyExpandable : true
      };
    });
  },

  _getExpandedItems(array, expandedItems) {
    expandedItems = expandedItems || [];
    array.forEach(item => {
      if (Array.isArray(item.itemList)) {
        this._getExpandedItems(item.itemList, expandedItems);
      }
      if (item.expanded) {
        expandedItems.push(item.code);
      }
    });
    return expandedItems;
  },

  _formatData(arr, activeCode, old_arr) {
    const expandedCodes = old_arr ? this._getExpandedItems(old_arr) : [];
    if (arr[0] && typeof arr[0].indent === "number") {
      return this._formatWithIndent(arr, expandedCodes, activeCode);
    } else {
      return this._formatWithItemList(arr, expandedCodes, activeCode);
    }
  },

  _onClick(item) {
    if (item.code !== undefined) {
      this.setState({ activeCode: item.code }, () => {
        this.props.onClick && this.props.onClick(item);
      });
    }
  },

  _onCtrlClick(item) {
    if (item.code !== undefined) {
      this.setState({ activeCode: item.code }, () => {
        this.props.onCtrlClick && this.props.onCtrlClick(item);
      });
    }
  },

  _onWheelClick(item) {
    if (item.code !== undefined) {
      this.setState({ activeCode: item.code }, () => {
        this.props.onWheelClick && this.props.onWheelClick(item);
      });
    }
  },

  _getMenuItems(menuItems, level) {
    let result = [];
    level = level + 1 || 1;

    menuItems && menuItems.forEach((item, i) => {
      let className = this.getClassName().link;
      if (item.code === this.state.activeCode) {
        className += ' ' + this.getClassName().linkActive;
      }
      if (level === 1) {
        className += ' ' + this.getClassName().linkMain;
      }
      const width = 32 + 24 * level;

      if (item.itemList && item.itemList.length > 0) {
        result.push(<div key={i}>
            <div className={className}>
              <UU5.Bricks.Link style={{ minWidth: width + 'px' }} className={this.getClassName().icon} onClick={() => this._toggleExpanded(item)}>
                <UU5.Bricks.Icon icon={item.expanded ? 'mdi-menu-down' : 'mdi-menu-right'} />
              </UU5.Bricks.Link>
              <UU5.Bricks.Link className={this.getClassName('pageLink')} content={item.content} onClick={() => item.onlyExpandable ? this._toggleExpanded(item) : this._onClick(item)} onCtrlClick={() => item.onlyExpandable ? this._toggleExpanded(item) : this._onCtrlClick(item)} onWheelClick={() => item.onlyExpandable ? this._toggleExpanded(item) : this._onWheelClick(item)} />
            </div>
            <div style={{ display: item.expanded ? 'block' : 'none' }}>
              {this._getMenuItems(item.itemList, level)}
            </div>
          </div>);
      } else {
        result.push(<div key={i} className={className}>
            <UU5.Bricks.Link style={{ paddingLeft: width + 'px' }} className={this.getClassName('pageLink')} content={item.content} onClick={() => this._onClick(item)} onCtrlClick={() => this._onCtrlClick(item)} onWheelClick={() => this._onWheelClick(item)} />
          </div>);
      }
    });

    return result;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return <div {...this.getMainAttrs()}>
        {this._getMenuItems(this.state.menuItems.slice())}
      </div>;
  }
  //@@viewOff:render
});

export default Menu;